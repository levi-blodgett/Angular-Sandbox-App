npm install -g @angular/cli to install angular
ng new angularapp to create a new angular app in the current directory
ng serve --open to start the server in the browser
ng generate component components/users = ng g c components/users
ng g c components/users to create ts, html, css, spec files
ng g c components/users skipTests to not create the spec file
npm install bootstrap to install bootstrap into the project - do not forget to update styles and scripts in angular.json
npm install font-awesome to install font-awesome into the project - do not forget to update styles and scripts in angular.json

Components - The bulk of Angular apps, each piece of the UI can be organized to contain a class and a template, and the class and template can be bound to each other different ways, and each piece is their own component.
Why components? Code organization, break up the UI, contain properties and methods, better teamwork, and it promotes reusability.
ng g component components/my-component to generate components with Angular-CLI

Constructors automatically run when page is loaded, so they are often used to instantiate things.

Types (part of TypeScript), help with errors by making sure you don't assign a string to a number and such.

To change the "app" it is looking at, change the app.component.html from "app-user" to "app-users" or vice versa.

ngFor = like an attribute, need to use an asterisk before it, it is called a structural directive. See "users.component.html" for an example of it in use.

To make something optional, put a "?" immediately following the variable.

Events in angular are done by doing (click)="fireEvent($event)
(click) being the event it is listening for
fireEvent being the name of the function it will call
$event being the event passed through as a value when clicked

ngModel = Used to bind data, and it needs to have modules added for it, since it isn't automatically included in NgModule:
"
import { FormsModule } from '@angular/Forms';
imports: [
   FormsModule
]
"

Services:
- Class that can send functionality and data across multiple components
- Keeps components lean
- DRY - Don't repeat yourself
- Ideal place for Ajax calls using HTTP module

How to create a service:
Create a new file - /services/my-service.service.ts
Import @Injectable and create classAdd as a provider to @NgModule
Call from component(s)

Generate service with Angular-CLI:
"ng g service services/my-service" - Creates service file and class
Add the "--module=app.module" flag to automatically add as a provider
Add the "skipTests" flag to not create the spec file

Generate posts component files:
ng g c components/posts skipTests

Generate a post service:
ng g s services/post --module-app.module skipTests

Generate post-form component files:
ng g c components/post-form skipTests